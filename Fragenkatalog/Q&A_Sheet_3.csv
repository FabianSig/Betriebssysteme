Welche grundlegenden Gedanken stecken hinter dem Konzept des virtuellen Speichers?;1) Prozess soll ablaufen können wenn er nur teilweise im Hauptspeicher ist. 2) Der Speicherbedarf eines Programms sollte größer als der physikalisch vorhandene Hauptspeicher sein können. 3) Ein Programmierer sollte nur einen kontinuierlichen SPeicherbereich beginnend bei Adresse 0 sehen und sich nicht um die Zerstückelung des Hauptspeichers auf mehrere Benutzer kümmern.
Welche Aufgabe hat eine Verdrängungsstrategie und was ist ein Seitenfehler?;Die Strategie, die verwendet wird, um eine zu verdrängende Seite auszuwählen, wird als Seitenersetzungsstrategie bezeichnet. Ein page fault ist ein Trap, den die MMU erzeugt, wenn von einem Prozess eine physikalische Adresse angesprochen wird, die nicht im Hauptspeicher geladen ist. Das Betriebssystem springt in den Kernelmodus zur Bearbeitung des Seitenfehler und versucht die Seite in einen Frame zu laden.
Welcher Seitenersetzungsalgorithmus wäre theoretisch optimal und warum ist dieser praktisch nur sehr schwer zu realisieren?;Ein optimaler Algorithmus würde die Seitenrahmen für eine Ersetzung auswählen, die am spätesten von allen belegten Seitenrahmen wieder benötigt würden. Er ist als „Algorithmus von Belady“ bekannt. Es ist schwer zu realisieren weil das Betriebssystem zum Zeitpunkt des Seitenfehlers nicht wissen kann, wann welche Seite als nächstes verwendet wird.
Warum ist der LRU-Algorithmus zur Seitenersetzung bei der virtuellen Adressierung schwer zu realisieren? Welcher Algorithmus ist eine gute Alternative dazu?;LRU-Algorithmus bei virtueller Adressierung schwer umzusetzen wegen des hohen Aufwands beim Umsortieren der Seiten in einer linearen Liste. Pseudo-LRU-Algorithmen wie Clock-Page und Second-Chance verwenden R- und M-Bits, um den Aufwand zu verringern. Als Alternative eignet sich der NFU-Algorithmus.
Welche Probleme ergeben sich bei sehr großen virtuellen Adressräumen in Bezug auf die Verwaltung der Seitentabellen?;Probleme bei großen virtuellen Adressräumen sind: Leistungsverschlechterung durch zusätzliche Hauptspeicherzugriffe auf Seitentabellen und enormer Speicherplatzbedarf für die Tabellenverwaltung.
Welche Möglichkeiten gibt es die hohe Belastung der Seitentabellenverwaltung insbesondere bei großen Adressräumen zu optimieren?;Zur Optimierung der Speicherzugriffe gibt es Adressumsetzpuffer (Translation Lookaside Buffers, kurz: TLB) und die invertierten Seitentabellen.
Erläutern Sie die Grundprinzipien des TLB und der invertierten Seitentabelle mit Hashing!;TLB (Translation Lookaside Buffer) ist ein schneller Speicher, der virtuelle auf reale Adressen abbildet. Es speichert die am häufigsten genutzten Seitennummern. Bei einer Adressumsetzung wird zuerst im TLB nachgeschaut. Bei einem Treffer (TLB hit) erspart man sich den Zugriff auf die Seitentabellen und hat die reale Adresse bereits. Bei einem Fehlschlag (TLB miss) erfolgt die herkömmliche Adressumsetzung über die Seitentabelle(n). In invertierten Seitentabellen mit Hashing sucht man Seiten nicht klassisch, sondern mithilfe einer Hash-Tabelle, die virtuelle Seitennummern verwendet. Die invertierte Seitentabelle bleibt im Hauptspeicher, wodurch das Auslagern großer "herkömmlicher" Seitentabellen vermieden wird.