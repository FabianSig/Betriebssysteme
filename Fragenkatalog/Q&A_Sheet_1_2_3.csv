Was ist ein Von-Neumann-Rechner und wie unterscheidet er sich von einem Harvard-Rechner?;Von-Neumann-Rechner: Vier Funktionseinheiten Leitwerk (Control Unit, CU), Rechenwerk (Processing Unit, PU), Speicher (Memory), Ein-/Ausgabe (Input/Output, E/A). Harvard-Rechner (Nach der Struktur des Mark-I-Rechners benannt):  Unterschied zum Von-Neumann-Rechner zwei getrennte Speicher, einen für die Daten und einen für die Maschinenbefehle. Beide Speicher werden auch über einen getrennten Bus mit der CPU verbunden.
Wozu braucht man in Computern CPU-Register?;Schnelle Speicher, um die Maschinenbefehle auszuführen. Je nach Maschinenbefehl werden eines oder mehrere Register benötigt. Die Maschinenbefehle schreiben ihre Operanden oft in Register oder lesen Operanden aus Registern. Benennung je nach Typ z.B. Integerregister, Universalregister, Gleitkommaregister, Datenregister, Segmentregister usw.
Was ist ein Program Status Word (PSW) und wozu wird es verwendet?;Statusregister für Vergleichsoperationen und weitere Kontrollbits z.B. aktueller Status der Rechneranlage 
Was ist ein Mehrzweck- oder Universalbetriebssystem?;Betriebssystem für verscheidenste Anwendung (überwiegend betriebliche und verwaltungstechnische Aufgabenstellungen, eher weniger für Realzeitprobleme) -> keine Realtime-Eigenschaften
Was ist ein Mehrkernprozessor?;Mehrere vollständige CPUs, viele Ressourcen (Ausnahme Bus und einige Caches) repliziert
Welche Unix-Standards kennen Sie und was ist standardisiert?;XPG (OpenGroup), SVID (System V), POSIX (IEEE) und SUS (The Single Unix Specification). Standardisierung der Schnittstellen (Kommandoschnittstelle, Programmschnittstellen für Kerndienste)
Was versteht man unter einem Mikrokern?;Enthält einen leichtgewichtigen Kernel, Entlastung durch Auslagerungen von Serverprozesse (Funktionalität in Anwendungsprozesse), Kernel übernimmt Abwicklung der Komminikation zwischen Client- und Serverprozessen. Zugriff (Request): Clientprozesse <-> Service-Request-Schnittstelle <-> Mikrokern <-> Awendungsprozess [Serverprozess]
Nennen Sie ein Beispiel für ein Betriebssystem mit Mikrokern-Achitektur!;Mach von der Carnegy Mellon University (CMU), Mac OS X, Hurt, L4, Amoeba, Chorus
Nennen Sie vier Betriebsmittel, welche das Betriebssystem verwaltet! Welche davon sind hardware- und welche software-technische Betriebsmittel?;Speicher (Hardware), Prozessor (Hardware), Gerät (Hardware), Datei (Software), Nachricht (Software), Prozess (Software)
Erläutern Sie den Unterschied zwischen Teilnehmer- und Teilhaberbetrieb! In welcher Betriebsart wird üblicherweise ein Transaktionsmonitor eingesetzt?;Teilnehmerbetrieb: Jeder Anwender eigenen Benutzerprozess und weitere Betriebsmittel. Anmeldung einen Login-Dialog. Teilhaberbetrieb: Zuteilung von Prozesse und Betriebsmittel über Transaktionsmonitor (effiziente Verteilung an die Benutzer, so als hätte der Benutzer eigenen Prozess zugeordnet bekommen). Ideal für dialogorientierte Programme (kurze und schnelle Transaktionen) z.B. Buchungssystem für Flugbuchungen.  
Welche Aufgaben erfüllt ein Transaktionsmonitor, welche ein ApplicationServer?;Transaktionsmonitor (im Teilhaberbetrieb): Dienstprogramm oberhalb des Kernels. Übernimmt Zugangskontrolle, Verteilung der Anfragen auf bereitgestelle Prozesse, Opitmierung der Zugriffe, Verwaltung der Ressourcen, Zuordnung von Datenbankverbindungen. Application Server: Ähnliche Aufgaben wie der Transaktionsmonitor, aber keine Transaktionsprogramme sondern verteile Anwendungen.
Nennen Sie Vorteile der Schichtenarchitektur bei Betriebssystemen!;Abhängigkeiten der Hardware in einer Schicht gekapselt -> erleichterte Portierung auf eine andere Hardwareplattform
Verfügen die Betriebssysteme Unix und Windows 2000/XP über Mikrokern-Architekturen? Wenn nein, wie sind sie konzipiert?;Keine echten Mikrokern-Architekturen. Windows & Unix -> meist schichtorientierte Architektur. Windows -> Nutzt Konzept des Mikrokerns, Subsysteme, und Systemservices sind in den Benutzermodus ausgelagert.
Was bezeichnet man als Timesharing?;Zuordnung des Prozessors nach Zeitintervallen an die nebenläufigen Programme
Wozu verwendet man Embedded Systeme?;Rechner oder Steuerungssystem, das in Geräten (Telefon, DCD-Player, Waschmaschinen, Fernseher), Robotorn oder Fahrzeugen eingebaut ist. Ausführung der Aufgabe meist unsichtbar. Geschlossenes System mit dedizierte Aufgabe. Klein, da wenig Ressourcen -> deswegen oft kein Betriebssystem -> direkte Bedienung der Hardwareschnittstellen. Sind Echtzeitsysteme. 
Nennen Sie ein Beispiel für Embedded Systeme!;Geräte (Telefon, DCD-Player, Waschmaschinen, Fernseher), Robotorn oder Fahrzeugen
Wozu dient ein Terminalserver?; Bedienen "dumme" Clientrechner (sog. Thin Clients). Anwendungsprogramme laufen vollständig in Servern ab. Clientrechner nur noch für Präsentation. Zentralisierung von Betriebsmitteln, um beteiligte Systeme leichter administrieren zu können. Anwender arbeitet mit gewohnten Benutzeroberfläche, Anwendung läuft aber komplett am Server ab. Bildschirmänderungen werden im Client dargestellt. Je nach Leistungsfähigkeiten mehrere oder viele Benutzer.
Was ist der Unterschied zwischen Emulation und Virtualisierung?;Emulation: Komplette Hardware in Software nachgebildet. Virtualisierung: Nur geringer Teil der Befehle des kompletten Befehlssatzes wird nachgebildet. 
Was ist der Unterschied zwischen Polling und interruptgesteuerter Verarbeitung?;Polling: Zyklische Abfragen von Ereignisquellen (z.B. E/A-Geräte), um Kommunikationsbereitschaft festzustellen bzw. um anliegende Ereignisse oder Kommunikationswünsche abzufragen. Nachteil: CPU muss ständig arbeiten (Effizienz beeinträchtigt, Nachfrage umsonst). Vorteil: Leicht zu implementieren. Interrupts: sog. Betriebssystembedingungen oder asynchrone Ereignisse, die Prozessor dazu veranlassen, vordefinierten Code auszuführen, der außerhalb des normalen Programmflusses liegt. Überwachte Ereignisquellen müssen nicht ständig abgefragt werden., sondern melden sich beim Auftreten eines Ereignisses, das behandelt werden muss.
Wozu dient der System Call und wie wird er üblicherweise von einem Betriebssystem wie Windows oder Unix ausgeführt?; Systemcall (auch Software-Interrupt) ist ein synchroner, also vorhersehbarer und reproduzierbar Interrupt. Ist ein Dienstaufruf an das Betriebssystem, bei dessen Ausführung in den Kernelmodus gewechselt wird. Kontrollfluss wird an den Kernel über ein Anwendungsprogramm übergeben.
Was bedeutet Maskierung von Unterbrechungsanforderungen?;
Wie erkennt die CPU, daß eine Unterbrechungsanforderung ansteht?;
Was versteht man unter einer Interrupt-Vektor-Tabelle?;
Was ist eine Interrupt-Service-Routine und wann wird sie aufgerufen?;
Was bedeuetet Interrupt-Sharing?;
Erläutern Sie die Abwicklung eines Hardware-Interrupts unter Linux!;
Erläutern Sie die Behandlung eines System Calls!;
Erläutern Sie den Unterschied zwischen einem synchronen und einem asynchronen Interrupt!;
Welche Aufgabe hat ein Interrupt-Controller?;
Was ist in der Prozessverwaltung ein PCB, wozu dient er und welche Inhalte hat er?;
Nennen Sie dabei drei wichtige Informationen, die im PCB verwaltet werden!;
Was versteht man unter einem Thread? Wie verhalten sich Threads zu Prozessen im Hinblick auf die Nutzung des Prozessadressraums?;
Beschreiben Sie den groben Ablauf eines Prozess-Kontextwechsels!;
Erläutern Sie, warum ein Thread-Kontextwechsel schneller sein kann als ein Prozess-Kontextwechsels!;
Was bedeutet eine 1:n-Beziehung zwischen Prozess und Thread?;
Warum ist der Einsatz von Threads sinnvoll?;
Beschreiben Sie einen einfachen Zustandsautomaten eines Prozesses!;
Erläutern Sie die Prozesshierarchie unter Unix!;
Was ist ein Zombie-Prozess unter Unix?;
Welche Scheduling-Algorithmen sind für Echtzeitbetriebssysteme sinnvoll? Begründen Sie!;
Welche Aufgaben haben im Prozess-Management der Dispatcher und derScheduler?;
Nennen Sie jeweils zwei geeignete Scheduling-Verfahren für Batch- undDialog-Systeme und erläutern Sie diese kurz!;
Erläutern Sie den Unterschied zwischen preemptive und non-preemptive Scheduling und nennen Sie jeweils zwei Scheduling-Strategien, die in diese Kategorien passen!;
Wie funktioniert der RR-Scheduling-Algorithmus?;
Warum ist der Scheduling-Algorithmus SRTF (Shortest Remaining Time First) kaum zu realisieren?;
Welche grundlegenden Gedanken stecken hinter dem Konzept des virtuellen Speichers?;1) Prozess soll ablaufen können wenn er nur teilweise im Hauptspeicher ist. 2) Der Speicherbedarf eines Programms sollte größer als der physikalisch vorhandene Hauptspeicher sein können. 3) Ein Programmierer sollte nur einen kontinuierlichen SPeicherbereich beginnend bei Adresse 0 sehen und sich nicht um die Zerstückelung des Hauptspeichers auf mehrere Benutzer kümmern.
Welche Aufgabe hat eine Verdrängungsstrategie und was ist ein Seitenfehler?;Die Strategie, die verwendet wird, um eine zu verdrängende Seite auszuwählen, wird als Seitenersetzungsstrategie bezeichnet. Ein page fault ist ein Trap, den die MMU erzeugt, wenn von einem Prozess eine physikalische Adresse angesprochen wird, die nicht im Hauptspeicher geladen ist. Das Betriebssystem springt in den Kernelmodus zur Bearbeitung des Seitenfehler und versucht die Seite in einen Frame zu laden.
Welcher Seitenersetzungsalgorithmus wäre theoretisch optimal und warum ist dieser praktisch nur sehr schwer zu realisieren?;Ein optimaler Algorithmus würde die Seitenrahmen für eine Ersetzung auswählen, die am spätesten von allen belegten Seitenrahmen wieder benötigt würden. Er ist als „Algorithmus von Belady“ bekannt. Es ist schwer zu realisieren weil das Betriebssystem zum Zeitpunkt des Seitenfehlers nicht wissen kann, wann welche Seite als nächstes verwendet wird.
Warum ist der LRU-Algorithmus zur Seitenersetzung bei der virtuellen Adressierung schwer zu realisieren? Welcher Algorithmus ist eine gute Alternative dazu?;LRU-Algorithmus bei virtueller Adressierung schwer umzusetzen wegen des hohen Aufwands beim Umsortieren der Seiten in einer linearen Liste. Pseudo-LRU-Algorithmen wie Clock-Page und Second-Chance verwenden R- und M-Bits, um den Aufwand zu verringern. Als Alternative eignet sich der NFU-Algorithmus.
Welche Probleme ergeben sich bei sehr großen virtuellen Adressräumen in Bezug auf die Verwaltung der Seitentabellen?;Probleme bei großen virtuellen Adressräumen sind: Leistungsverschlechterung durch zusätzliche Hauptspeicherzugriffe auf Seitentabellen und enormer Speicherplatzbedarf für die Tabellenverwaltung.
Welche Möglichkeiten gibt es die hohe Belastung der Seitentabellenverwaltung insbesondere bei großen Adressräumen zu optimieren?;Zur Optimierung der Speicherzugriffe gibt es Adressumsetzpuffer (Translation Lookaside Buffers, kurz: TLB) und die invertierten Seitentabellen.
Erläutern Sie die Grundprinzipien des TLB und der invertierten Seitentabelle mit Hashing!;TLB (Translation Lookaside Buffer) ist ein schneller Speicher, der virtuelle auf reale Adressen abbildet. Es speichert die am häufigsten genutzten Seitennummern. Bei einer Adressumsetzung wird zuerst im TLB nachgeschaut. Bei einem Treffer (TLB hit) erspart man sich den Zugriff auf die Seitentabellen und hat die reale Adresse bereits. Bei einem Fehlschlag (TLB miss) erfolgt die herkömmliche Adressumsetzung über die Seitentabelle(n). In invertierten Seitentabellen mit Hashing sucht man Seiten nicht klassisch, sondern mithilfe einer Hash-Tabelle, die virtuelle Seitennummern verwendet. Die invertierte Seitentabelle bleibt im Hauptspeicher, wodurch das Auslagern großer "herkömmlicher" Seitentabellen vermieden wird.