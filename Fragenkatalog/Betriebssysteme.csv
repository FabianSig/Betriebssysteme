Was ist der Unterschied zwischen Polling und interruptgesteuerter Verarbeitung?	Unter Polling versteht man das zyklische Abfragen von einer Ereignisquelle&nbsp;um anliegende Ereignisse&nbsp;abzufrage.<br><br>Polling hat den Nachteil, dass die CPU ständig arbeiten muss und damit die Effizienz eines Systems beeinträchtigt ist.<br><br>Interrupts sind Betriebssystembedingungen die den Prozessor veranlassen, einenvordefinierten Code auszuführen, der außerhalb des normalen Programmflusses liegt.<br><br>Ereignisquellen melden sich beim Auftreten eines Ereignisses, das behandelt<br>werden muss.
Wozu dient ein Systemcall und wie wird er üblicherweise von einem Betriebssystem wie Windows oder Unix ausgeführt?	Ein Systemcall ist ein synchroner, also ein vorhersehbarer und reproduzierbarer Interrupt und wird auch als Software-Interrupt bezeichnet.<br><br>Ein Systemcall ist ein Dienstaufruf an das Betriebssystem, bei dessen Ausführung in den Kernelmodus gewechselt wird.<br><br>Der Kontrollfluss wird dabei meist von einem Anwendungsprogramm an den Kernel übergeben.
Was bedeutet Maskierung von Unterbrechungsanforderungen?	Eine Maskierung ist das explizite Ausschalten eines Interrupts.<br><br>Die Maskierung erfolgt&nbsp;über ein Maskenregister, für jede Interrupt-Quelle wird in dem Register ein Maskierungsbit verwaltet, wird das Bit auf 1 gesetzt, ist der Interrupt ausgeschaltet.
Wie erkennt die CPU, dass eine Unterbrechungsanforderung ansteht?	Die Prüfung, ob eine Unterbrechung ansteht, ist Teil des Befehlszyklus. Nach Ausführung eines Maschinenbefehls wird überprüft, ob ein Interrupt-Request anliegt.
Was versteht man unter einer Interrupt-Vektor-Tabelle?	Dies ist eine Tabelle, welche Interrupt-Vektoren, also die eigentlichen Einsprungadressen der Interrupt-Service-Routinen enthält und an einer vordefinierten Stelle im Kernelspeicher liegt.
Was ist eine Interrupt-Service-Routine und wann wird sie aufgerufen?	Das Programmstück, das den Interrupt bearbeitet, wird als Interrupt-Service-Routine (ISR, Interrupt-Bearbeitungsroutine) bezeichnet.
Was bedeutet Interrupt-Sharing?	Beim Interrupt-Sharing teilen sich mehrere Geräte eine Interrupt-Nummer. Bei Auftreten eines Interrupts muss dann ermittelt werden, welches Gerät den Interrupt tatsächlich ausgelöst hat. Diese Aufgabe erledigt meist das Betriebssystem.
Erläutern Sie die Abwicklung eines Hardware-Interrupts unter Linux.	<ol><li>In der Kernelmodus wechseln</li><li>Register sichern</li><li>Später&nbsp;auszuführenden&nbsp;Aufgaben in das&nbsp;Tasklet struct speichern</li><li>Tasklet struct an&nbsp;Tasklet-Scheduler geben damit dieser die Tasks nach dem Interrupt abarbeiten kann</li><li>Interrupt aus der Tabelle ausführen</li></ol>
Erläutern Sie die Abwicklung eines Systemcalls.	<ol><li>Der aktuelle Kontext wird gesichert</li><li>Der Program Counter wird mit der Adresse von der Systemroutine belegt</li><li>Es wird in den Kernelmodus gewechselt</li><li>Systemroutine wird ausgeführt</li><li>Kontext wird wiederhergestellt</li><li>Program Counter wird mit der Adresse des Befehls nach der Systemroutine belegt</li></ol>
Nennen Sie den Unterschied zwischen einem synchronen und asynchronen Interrupt.	Synchrone Interrupts (Exceptions) treten immer an der gleichen&nbsp;Programmstelle auf.<br><br>Asynchrone Interrupts sind die klassischen Interrupt-Typen, die nicht an ein laufendes Programm gebunden sind.<br><br>Asynchrone Interrupts sind nicht vorhersehbar und können auch nicht ohne weiteres reproduziert werden.
Welche Aufgabe hat ein Interrupt-Controller?	Ein Interrupt-Controller erzeugt aus einem IRQ (einer Interruptanforderung) eine<br>Unterbrechung der CPU, die mit Hilfe eines passenden Programmstücks (einer ISR) bearbeitet werden muss.
Was ist in der Prozessverwaltung ein PCB, wozu dient er und welche Inhalte hat er?	Ein Eintrag in der Prozesstabelle heißt Process Control Block (PCB).<br><br>Der PCB enthält Information zur Identifikation des Prozesses, die Information zum aktuellen Prozesszustand sowie Informationen zu sonstigen Ressourcen, die dem Prozess zugeordnet sind (Dateien, offene Netzwerkverbindungen).
Nennen Sie dabei drei wichtige Informationen, die im PCB verwaltet werden.	<ul><li>Prozesszustand<br></li><li>Dateien<br></li><li>offene Netzwerkverbindungen<br></li><li>Programmzähler<br></li><li>Prozessnummer<br></li><li>Registerinhalte<br></li></ul>
Was versteht man unter einem Thread? Wie verhalten sich Threads zu Prozessen im Hinblick auf die Nutzung des Prozessadressraums?	Ein Thread stellt eine nebenläufige Ausführungseinheit innerhalb eines Prozesses dar.&nbsp;Threads werden&nbsp;als leichtgewichtige&nbsp;Prozesse oder kurz LWP bezeichnet.<br><br>Threads erhalten den vollen Zugriff auf den zugehörigen Prozessadressraum.
Beschreiben Sie den groben Ablauf eines Prozess-Kontextwechsel.	<ol><li>Aktiver Prozess unterbrochen<br></li><li>Prozesskontext wird gesichert<br></li><li>Prozesskontext&nbsp;des neu aktivierten Prozesses wird geladen</li></ol>
Erläutern Sie, warum ein Thread-Kontextwechsel schneller sein kann als<br>ein Prozess-Kontextwechsel	Ein Thread-Kontextwechsel innerhalb des laufenden Prozesses kann schneller sein als ein Prozess-Kontextwechsel, weil meist Speicherbereiche des gleichen Prozesses verwendet werden.
Was bedeutet eine 1:n-Beziehung zwischen den Betriebsmitteln Prozess und Thread?	Ein Prozess kann mehrere Threads beherbergen. 1:n-Beziehungen, bei denen ein Prozess nahezu beliebig viele Threads enthalten kann, sind heute in Betriebssystemen üblich.
Warum ist der Einsatz von Threads sinnvoll?	Threads sind leichtgewichtiger als Prozesse. Ein Thread-Kontextwechsel innerhalb des laufenden Prozesses kann schneller sein als ein Prozess-Kontextwechsel, weil meist Speicherbereiche des gleichen Prozesses verwendet werden.
Beschreiben Sie einen einfachen Zustandsautomaten eines Prozesses.	Ein einfacher Zustandsautomat für einen Prozess hat vier Zustände:<br><ul><li>Bereit - Der Prozess ist zur Bearbeitung vorbereitet</li><li>Aktiv -&nbsp;Der Prozess hat eine CPU</li><li>Blockiert -&nbsp;Der Prozess wartet er auf Ressourcen</li><li>Beendet - Der Prozess existiert nicht mehr</li></ul>
Erläutern Sie die Prozesshierarchie unter Unix.	Baumartigen Prozessstruktur,&nbsp;init-Prozess der Urvater aller folgenden Prozesse.<br><ul><li>init-Prozess PID 1<br></li><li>peicherverwaltungs-Prozess (swapper) erhält die PID 0<br></li></ul>, ein S und ein anderer Speicherverwaltungsprozess (page) die PID 2.<br><br>Kindprozess erbt&nbsp;vom&nbsp;Elternprozess die gesamte Umgebung.<br>
Was ist ein Zombie-Prozess unter Unix?	Ein Zombie ist ein Prozess in einem speziellen Zustand. In diesen Zustand gelangt ein Prozess, der terminieren will. Er verweilt solange in diesem Zustand, bis der Elternprozess eine Nachricht über das Ableben des Kindprozesses erhalten hat und terminiert erst dann.
Welche Scheduling-Algorithmen sind für Echtzeitbetriebssysteme (Realtime-System) sinnvoll und warum?	Bekannte&nbsp;Scheduling-Algorithmen:<br><ul><li>Minimal Deadline First</li><li>Polled Loop<br></li><li>Interrupt-gesteuert</li></ul><div>Prozess mit der kleinsten nächsten Zeitschranke (deadline) als erstes ausgewählt.<br></div><div><br></div><div>Alle Ereignisquellen zyklisch nach einem anstehenden Ereignis abgefragt und dieses wird dann gleich bearbeitet.<br></div><div><br></div><div>Interrupt-gesteuerte Systeme warten in einer Warteschleife auf Interrupts von Ereignisquellen und führen dann die geeignete Interrupt-Service-Routine aus.<br></div><div><br></div><div>Es wird zwischen hard real time und soft real time unterschieden. Erstere müssen schnell reagieren, bei letzteren<br>ist eine gewisse Verzögerung zumutbar.<br></div>